# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Platform {
  id: ID!

  """플랫폼명"""
  platformName: String!

  """로고경로"""
  logoUrl: String!

  """도메인"""
  domainUrl: String!

  """사용자목록"""
  users: [User!]!
}

type Category {
  id: String!

  """카테고리명"""
  content: String!

  """게시물목록"""
  posts: [Post!]!

  """게시물수"""
  postCount: Int
}

type Comment {
  id: String!

  """내용"""
  content: String!
  createdAt: Date!
  updatedAt: Date!

  """게시물"""
  post: Post!

  """작성자"""
  user: User!
}

""""""
scalar Date

type Post {
  id: String!

  """내용"""
  content: String!

  """노출설정"""
  visibility: String!

  """링크"""
  link: String
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date

  """작성자"""
  user: User!

  """좋아요목록"""
  likers: [User!]!

  """좋아요한 포스트여부"""
  isLiked: Boolean

  """좋아요수"""
  likedCount: Float

  """카테고리목록"""
  categories: [Category!]!

  """댓글목록"""
  comments: [Comment!]!

  """댓글수"""
  commentCount: Float
}

type Follow {
  id: String!
  acceptor: User!
  requester: User!
}

type Attendance {
  id: String!

  """사용자"""
  user: User!
  createdAt: Date!
}

type Notification {
  id: String!

  """발신자"""
  from: User!

  """수신자"""
  to: User!

  """내용"""
  content: String!

  """링크"""
  url: String!
  createdAt: Date!
  readedAt: Date
}

type Photo {
  id: String!

  """업로드주소"""
  src: String!

  """사진타입"""
  type: String!

  """사용자"""
  user: User!
  createdAt: Date!
}

type User {
  id: String!

  """별명"""
  nickname: String!

  """프로필사진"""
  avatar: String!

  """관리자여부"""
  isMaster: Boolean!

  """상태코드"""
  status: String!

  """로그인유지여부"""
  isKeep: Boolean

  """로그인토큰"""
  token: String

  """상태설명"""
  statusText: String!

  """링크"""
  link: String!
  createdAt: Date!
  updatedAt: Date!

  """플랫폼"""
  platform: Platform!

  """작성한포스트목록"""
  posts: [Post!]!

  """작성한포스트수"""
  postCount: Int

  """작성한댓글목록"""
  comments: Int!

  """좋아요한포스트목록"""
  likes: [Post!]!

  """팔로워 목록"""
  followers: [Follow!]!

  """팔로워수"""
  followerCount: Int

  """팔로워 목록"""
  followings: [Follow!]!

  """팔로잉수"""
  followingCount: Int

  """팔로잉여부"""
  isFollowing: Boolean

  """자신여부"""
  isMe: Boolean

  """작성한포스트목록"""
  attendances: [Attendance!]!
  lastAccessAt: Date

  """받은 알림 목록"""
  receiveNotifications: [Notification!]!

  """보낸 알림 목록"""
  sendNotifications: [Notification!]!

  """팔로워포스팅알림여부"""
  receivePostNotification: Boolean!

  """좋아요알림여부"""
  receiveLikeNotification: Boolean!

  """업로드한사진목록"""
  photos: [Photo!]!
}

type OffsetMetadata {
  currentPage: Float!
  lastPage: Float!
  pageSize: Float!
  nodeCount: Float!
  totalCount: Float!
}

type CursorMetadata {
  pageSize: Float!
  totalCount: Float!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type OffsetPaginatedUser {
  nodes: [User!]
  pageInfo: OffsetMetadata!
}

type UserEdge {
  cursor: String!
  node: User!
}

type OffsetPaginatedPost {
  nodes: [Post!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedCategory {
  nodes: [Category!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedNotification {
  nodes: [Notification!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedComment {
  nodes: [Comment!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedPhoto {
  nodes: [Photo!]
  pageInfo: OffsetMetadata!
}

type Query {
  users(
    offset: Int = 0
    limit: Int = 12

    """닉네임"""
    nickname: String
  ): OffsetPaginatedUser!
  recommenders(offset: Int = 0, limit: Int = 12): OffsetPaginatedUser!
  user(id: String!): User!
  loadUser: User!
  followings(
    offset: Int = 0
    limit: Int = 12

    """닉네임"""
    nickname: String
  ): OffsetPaginatedUser!
  posts(
    offset: Int = 0
    limit: Int = 12

    """포스트 검색어"""
    searchKeyword: String

    """사용자 ID"""
    userId: String
    visibility: String
  ): OffsetPaginatedPost!
  categoryPosts(offset: Int = 0, limit: Int = 12, category: String!): OffsetPaginatedPost!
  likePosts(offset: Int = 0, limit: Int = 12): OffsetPaginatedPost!
  followingPosts(
    offset: Int = 0
    limit: Int = 12

    """사용자 ID"""
    userId: String
  ): OffsetPaginatedPost!
  removedPosts(offset: Int = 0, limit: Int = 12): OffsetPaginatedPost!
  categories(
    offset: Int = 0
    limit: Int = 12

    """검색어"""
    searchKeyword: String
  ): OffsetPaginatedCategory!
  recommendCategories(offset: Int = 0, limit: Int = 12): OffsetPaginatedCategory!
  relatedCategories(content: String!): [Category!]!
  notifications(offset: Int = 0, limit: Int = 12): OffsetPaginatedNotification!
  comments(offset: Int = 0, limit: Int = 12, postId: String!, order: [[String!]!]): OffsetPaginatedComment!
  photos(
    offset: Int = 0
    limit: Int = 12

    """사진타입"""
    type: String
  ): OffsetPaginatedPhoto!
}

type Mutation {
  addUser(input: CreateUserDto!): User!
  updateUser(input: UpdateUserDto!): User!
  updateSetting(input: UpdateSettingDto!): User!
  logIn(email: String!): Boolean!
  verify(input: VerifyUserDto!): User!
  githubLogIn(code: String!): User!
  follow(id: String!): User!
  unfollow(id: String!): User!
  addPost(input: CreatePostDto!): Post!
  updatePost(input: UpdatePostDto!): Post!
  deletePost(id: String!): Post!
  restorePost(id: String!): Post!
  like(id: String!): Boolean!
  unlike(id: String!): Boolean!
  readNotifications(input: ReadNotificationsDto!): [Notification!]!
  deleteNotifications(input: DeleteNotificationsDto!): [Notification!]!
  addComment(input: CreateCommentDto!): Comment!
  updateComment(input: UpdateCommentDto!): Comment!
  deleteComment(id: String!): Comment!
  deletePhoto(id: String!): Photo!
}

input CreateUserDto {
  """별명"""
  nickname: String!

  """프로필사진"""
  avatar: String
  email: String
  githubId: Float
}

input UpdateUserDto {
  """별명"""
  nickname: String

  """프로필사진"""
  avatar: String

  """상태코드"""
  status: String
}

input UpdateSettingDto {
  """팔로워포스팅알림여부"""
  receivePostNotification: Boolean

  """좋아요알림여부"""
  receiveLikeNotification: Boolean
}

input VerifyUserDto {
  email: String!
  isKeep: Boolean!
  captcha: String!
}

input CreatePostDto {
  """내용"""
  content: String!

  """노출설정"""
  visibility: String!
  categories: [String!]!
}

input UpdatePostDto {
  id: String!
  data: UpdatePostInput!
}

input UpdatePostInput {
  """내용"""
  content: String!

  """노출설정"""
  visibility: String!
  categories: [String!]!
}

input ReadNotificationsDto {
  notifications: [String!]!
}

input DeleteNotificationsDto {
  notifications: [String!]!
}

input CreateCommentDto {
  """내용"""
  content: String!
  postId: String!
}

input UpdateCommentDto {
  id: String!
  data: UpdateCommentInput!
}

input UpdateCommentInput {
  """내용"""
  content: String!
}