# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type Platform {
  id: ID!

  """플랫폼명"""
  platformName: String!

  """로고경로"""
  logoUrl: String!

  """도메인"""
  domainUrl: String!
  users: [User!]!
}

type Category {
  id: ID!
  content: String!
  postCount: Int
  posts: [Post!]!
}

type Comment {
  id: ID!
  content: String!
  createdAt: Date!
  updatedAt: Date!
  postId: ID!
  deletedAt: Date
  post: Post!
  user: User!
  userId: Float!
}

""""""
scalar Date

type Post {
  id: ID!
  content: String!
  link: String
  createdAt: Date!
  updatedAt: Date!
  user: User!

  """좋아요수"""
  likeCount: Float

  """포스트의 카테고리"""
  categories: [Category!]!

  """댓글수"""
  commentCount: Float
  deletedAt: Date
  userId: Float!
  likers: [User!]!
  comments: [Comment!]!
}

type User {
  id: ID!
  nickname: String!
  avatar: String!
  isMaster: Boolean!
  status: String
  isKeep: Boolean

  """로그인토큰"""
  token: String

  """상태설명"""
  statusText: String!

  """링크"""
  link: String!
  createdAt: Date!
  updatedAt: Date!
  postCount: Int
  followerCount: Int
  followingCount: Int
  email: String
  captcha: String
  deletedAt: Date
  platform: Platform!
  platformId: Float!
  posts: [Post!]!
  comments: [Comment!]!
  likes: [Post!]!
  followers: [User!]!
  followings: [User!]!
}

type OffsetMetadata {
  currentPage: Float!
  lastPage: Float!
  pageSize: Float!
  nodeCount: Float!
  totalCount: Float!
}

type CursorMetadata {
  pageSize: Float!
  totalCount: Float!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type OffsetPaginatedUser {
  nodes: [User!]
  pageInfo: OffsetMetadata!
}

type UserEdge {
  cursor: String!
  node: User!
}

type OffsetPaginatedPost {
  nodes: [Post!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedComment {
  nodes: [Comment!]
  pageInfo: OffsetMetadata!
}

type OffsetPaginatedCategory {
  nodes: [Category!]
  pageInfo: OffsetMetadata!
}

type Query {
  users(
    offset: Int = 0
    limit: Int = 12

    """닉네임"""
    nickname: String
    order: [[String!]!]
  ): OffsetPaginatedUser!
  recommenders(offset: Int = 0, limit: Int = 12): OffsetPaginatedUser!
  user(id: Float!): User!
  followings(offset: Int = 0, limit: Int = 12, order: [[String!]!]): OffsetPaginatedUser!
  posts(
    offset: Int = 0
    limit: Int = 12

    """포스트 검색어"""
    searchKeyword: String
    userId: ID
  ): OffsetPaginatedPost!
  categoryPosts(offset: Int = 0, limit: Int = 12, category: String!): OffsetPaginatedPost!
  likePosts(offset: Int = 0, limit: Int = 12, userId: ID): OffsetPaginatedPost!
  followingPosts(offset: Int = 0, limit: Int = 12, userId: ID): OffsetPaginatedPost!
  comments(offset: Int = 0, limit: Int = 12, postId: ID!, order: [[String!]!]): OffsetPaginatedComment!
  recommendCategories(offset: Int = 0, limit: Int = 12): OffsetPaginatedCategory!
}

type Mutation {
  addUser(input: CreateUserDto!): User!
  updateUser(input: UpdateUserDto!): User!
  logIn(email: String!): Boolean!
  verify(input: VerifyUserInput!): User!
  githubLogin(code: String!): User!
  follow(id: Float!): Boolean!
  unfollow(id: Float!): Boolean!
  addPost(input: CreatePostDto!): User!
  updatePost(input: UpdatePostDto!): User!
  deletePost(id: Float!): User!
  like(id: Float!): Boolean!
  unlike(id: Float!): Boolean!
  addComment(input: CreateCommentDto!): Comment!
  updateComment(input: UpdateCommentDto!): Comment!
  deleteComment(id: Float!): Comment!
}

input CreateUserDto {
  nickname: String!
  avatar: String
  email: String
}

input UpdateUserDto {
  nickname: String
  avatar: String
  status: String
  isKeep: Boolean
}

input VerifyUserInput {
  email: String!
  isKeep: Boolean!
  captcha: String!
}

input CreatePostDto {
  categories: [String!]!
}

input UpdatePostDto {
  id: ID!
  data: UpdatePostInput!
}

input UpdatePostInput {
  content: String!
  categories: [String!]!
}

input CreateCommentDto {
  content: String!
  postId: ID!
}

input UpdateCommentDto {
  id: ID!
  data: UpdateCommentInput!
}

input UpdateCommentInput {
  content: String!
}